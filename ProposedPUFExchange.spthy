/******************************************************************************
    Created : Squanix Machine
    Date    : 8 Mar 2021 on version 1
    
    This protocol model was didecated to modelling the proposed PUF key echange.
    
    This protocol using fuzzy extractor
 ******************************************************************************/

theory PUF_Exchange

begin


functions: spuf/2 [private]
functions: feg/2 [private]
functions: puf/2 [private]
functions: challenge/1 [private]

builtins: hashing, diffie-hellman, xor,  symmetric-encryption

rule CreateChallenge:
  [ NonceSource(UmD, ~a, ~b) ] --> [ Nonceout(UmD, challenge(~a ⊕ ~b)) ]

rule PUF:
  [ PUFproduce(UmD,c)] --[ PUF(UmD,c) ]-> [ PUFresult(UmD, c, puf(UmD, c)) ]

rule FuzzyGen:
  [ FEgenG(UmD, r) ] --> [ FEresultG(UmD, r, feg(UmD, r)) ]
  
rule FuzzyRep:
  [FEgenR(Sver, UmD, khl)] --> [FEresultR(Sver, UmD, khl, feg(UmD, khl))]
  
rule CRP:
  [ CRPin(Sver,UmD), Fr(~c) ] --[ CRP(Sver,UmD,~c) ]-> [!CRPout(Sver,UmD,~c,puf(UmD,~c))]
 
rule Auth:
  [Authin(UmD, a)] --> [Authout(UmD, h(a))]
  
rule KeyEx:
  [Keyin(Sver,m,l), Fr(~k)] --> [Keyout(Sver, h(m ⊕ ~k ⊕ l))]


/*
 * Hash-based mutual authentication based on strong PUFs
 * For strong agreement it is necessary that A is included in the hash.
 * The PUF challenge plays the role of first nonce n
 *
 * A -> D: c
 * D -> A: m,h(A,spuf(D,c),m)
 * A -> D: h(spuf(D,c),m)
 * 
 * challenge name chl
 * response name res
 * UnD -> Sver : nonce a
 *
 */
rule BuildWeakCRPs:
  [  ] --> [ CRPin($Sver,$UmD) ]    // create CRP on device

rule Unmanneddev:
  [  ] --> [Unmanend($UmD)]
  
rule ServerVer:
  [  ] --> [ Server($Sver)]

/*
 * Handshaking process 
 * 
 * UmD -> Sver : m
 * Sver -> UmD : n
 * 
 */
rule HS_send_n:                                                        // UmD send nonce a to Server verifier
  [ Unmanend(UmD), Server(Sver), !CRPout(Sver, UmD, chl, res), Fr(~n)] 
  --[Handshaking(UmD, Sver, <'UtoS', ~n>)]-> 
  [ Out(<UmD, Sver, ~n>), DBcrpA(UmD, Sver, ~n), CRPpass(Sver, UmD, chl, res)]
    
rule HS_rec_n_send_b:                                                        // Server receive the nonce a and send back nonce b
  [ In(<UmD, Sver, n>), DBcrpA(UmD, Sver, n), Fr(~b)]
  --[Handshaking(Sver, UmD, <'UtoS', n>)]-> //, HandshakingB(Sver, UmD, <'StoU', ~b>)]->
  [ Out(<Sver, UmD, ~b>), DBcrpB(Sver, UmD, ~b) ]
  
rule HS_rec_b:                                                              // UmD receive nonce b from the server the create challenge by Xor nonce a and b as cr
  [ In(<Sver, UmD, b>), DBcrpB(Sver, UmD, b), CRPpass(Sver, UmD, chl, res)] 
  --[Handshaking(UmD, Sver, <'StoU', b>)]->
  [ Unmanned2(Sver, UmD, chl) ]

// ----------------------- HandShaking Process----------------------------------

/*
 * Authentication process for phase 1
 * 
 * Sver -> UmD : n
 * UmD -> Sver : senc((r,k, khl), c), khl
 * 
 */
  
rule Auth_1_1:                                                             // UmD create PUF from challenge cr as r
  [ Unmanned2(Sver, UmD, chl) ] 
  -->
  [ PUFproduce(UmD,chl), Auth_1_1(Sver, UmD, chl) ]

rule Auth_1_2:                                                            // UmD create fuzzy extractor from response r
  [ Auth_1_1(Sver, UmD, chl), PUFresult(UmD, chl, res) ]
  -->
  [FEgenG(UmD, res), Auth_1_2(Sver, UmD, chl) ]

rule Auth_1_3:                                                            // UmD create hash that send to Sver
  [Auth_1_2(Sver, UmD, chl), FEresultG(UmD, res, khl)  ]
  --[AuthProtocol1(UmD, Sver, <chl, res, khl>), SendA(UmD, Sver, chl), SecretA(chl, res, khl)]->
  [ Out(<Sver, UmD, senc(<res, khl>, chl)>), Auth1to2(UmD, Sver, khl) ]
 
// ----------------------End Authentication phase 1 process ---------------------------------------

/*
 * 
 * Authentication process for phase 2
 * 
 * UmD -> Sver : senc((r,k, hl), c), hl
 * Sver -> UmD : h(c,r,k), senc(key, c)
 * 
 */
 
rule Auth_2_1:
  [In(<Sver, UmD,  senc(<res, khl>, chl)>), Fr(~Key), Auth1to2(UmD, Sver, khl), CRPpass(Sver, UmD, chl, res)]
  --[AuthProtocol1(Sver, UmD, <chl, res, khl>), AuthenticA(UmD, Sver, chl), Init(Sver,UmD, res)]->
  [Auth_2_1(Sver, UmD, h(<chl,res,khl>), ~Key, chl, res, khl)]
  
rule Auth_2_2:                                            // forming Authentication 2
  [Auth_2_1(Sver, UmD, h(auth2a), Key, chl, res, khl)]
  -->
  [Auth_2_2(Sver, UmD, h(auth2a), Key, res, chl)]
  
rule Auth_2_3:
  [Auth_2_2(Sver, UmD, h(auth2a), Key, res, chl)]
  -->
  [Auth_2_3(Sver, UmD, senc(Key, chl), h(auth2a), Key, res, chl)]

rule Auth_2_4:
  [Auth_2_3(Sver, UmD, senc(Key, chl), h(auth2a), Key, res, chl)]
  --[AuthProtocol2(UmD, Sver, Key), SendB(Sver, UmD, chl), SecretB(Key)]->
  [Out(<Sver, UmD, senc(Key, chl)>), Auth2to3(Sver, UmD, Key, chl)] 
  
  /*
   * Note for rule Auth2c.
   * 
   * The rule Auth2c has output of Keygen, which symmeric enc from Key by chl, and hash product of chl res and hl. 
   * To prove the hash product sometime consume alot of computational power for Tamarin. Since the hash product will alwasy secure and unique, we assume to not used hash product in the prove scheme.
   * 
   * If you has alot computational power to run Tamarin, i wish you can help me.
   * 
   * The original form of Auth2c
   * [Out(<Sver, UmD, senc(Key, chl), h(auth2a)>), Auth2to3(Sver, UmD, Key, chl)]
   * 
   */
  
// ---------------------End Authentication phase 2 process -----------------------------------------

/*
 * Authentication process for phase 3
 * 
 * Sver -> UmD : h(c,r,k), senc(key, c)
 * UmD -> Sver : h(senc(key, c), h(h(c,r,k), key)) 
 * 
 */
rule Auth3:
  [In(<Sver, UmD, senc(Key, chl)>), Auth2to3(Sver, UmD, Key, chl)]
  --[AuthProtocol2(Sver, UmD, Key), AuthProtocol3(Sver, UmD, chl, Key), AuthenticB(Sver, UmD, chl), SendC(UmD, Sver, chl),  SecretC(Key)]->
  [Out(<Sver, UmD, h(senc(Key, chl))>), Auth3to4(Sver, UmD, Key, chl)]
  
   /*
   * Note for rule Auth3.
   * 
   * The rule Auth3 has output of two hashing product, which hash of symmeric enc from Key by chl, and hash of chl.
   * To prove the two hash product sometime consume alot of computational power for Tamarin. Since the hash product will alwasy secure and unique, we assume to used one of hash product which is hash of symmeric enc from Key by chl.
   * 
   * If you has alot computational power to run Tamarin, i wish you can help me.
   * 
   * The original form of Auth2c
   * [Out(<Sver, UmD, h(senc(Key, chl)), h(chl)>), Auth3to4(Sver, UmD, Key, chl)]
   * 
   */

// ---------------------End Authentication phase 3 process -----------------------------------------
  
/*
 * Authentication process for final phase
 * 
 * UmD -> Sver : h(senc(key, c), h(h(c,r,k), key)) 
 * 
 */

rule Auth4:
  [In(<Sver, UmD, h(senc(Key, chl))>), Auth3to4(Sver, UmD, Key, chl) ]
  --[AuthProtocol3(UmD, Sver, chl, Key), AuthenticC(UmD, Sver, chl)]->
  [Auth4(Sver, UmD, h(senc(Key, chl)))]

// ---------------------End Authentication final phase process -----------------------------------------

/*
 * Restriction that used
 * 
 * 
 */

restriction resCRPbeforePUF:
  "All A D c1 c2 #i #j. CRP(A,D,c1)@i & PUF(D,c2)@j ==> i < j"
  
restriction resCRPnotReuseA:
  "All A D x #i #j. SendA(A, D, x)@i & SendA(A, D, x)@j ==> #i = #j"
  
restriction resCRPnotReuseB:
  "All A D x #i #j. SendB(A, D, x)@i & SendB(A, D, x)@j ==> #i = #j"
  
restriction resCRPnotReuseC:
  "All A D x #i #j. SendC(A, D, x)@i & SendC(A, D, x)@j ==> #i = #j"
  
restriction resCRPnotReuseAA:
  "All A D x #i #j. AuthenticA(A, D, x)@i & AuthenticA(A, D, x)@j ==> #i = #j"
  
restriction resCRPnotReuseBB:
  "All A D x #i #j. AuthenticB(A, D, x)@i & AuthenticB(A, D, x)@j ==> #i = #j"
  
restriction resCRPnotReuseCC:
  "All A D x #i #j. AuthenticC(A, D, x)@i & AuthenticC(A, D, x)@j ==> #i = #j"
  
// ---------------------End Authentication final phase process -----------------------------------------
  
/*
 * lemma to prove the protocol sanity
 * 
 * 
 */

lemma HS_Sanity:
  exists-trace
  "
  Ex Sver UmD c #i. Handshaking(UmD,Sver, <'UtoS', c>)@i
  &
  Ex Sver UmD c #i. Handshaking(Sver,UmD, <'UtoS', c>)@i
  & 
  Ex Sver UmD c #i. Handshaking(UmD,Sver, <'StoU', c>)@i
  "

lemma Authentication_Phase_1_Sanity:
  exists-trace
  "
  Ex Sver UmD res #i. AuthProtocol1(UmD, Sver, res)@i
  &
  Ex Sver UmD res #i. AuthProtocol1(Sver, UmD, res)@i
  "

lemma Authentication_Phase_2_Sanity:
  exists-trace
  "
  Ex Sver UmD keyA #i. AuthProtocol2(UmD, Sver, keyA)@i
  &
  Ex Sver UmD keyA #i. AuthProtocol2(Sver, UmD, keyA)@i
  "
  
lemma Authentication_Phase_3_Sanity:
  exists-trace
  "
  Ex Sver UmD chl key #i. AuthProtocol3(UmD, Sver, chl, key)@i
  &
  Ex Sver UmD chl key #i. AuthProtocol3(Sver, UmD, chl, key)@i
  "
  
// ---------------------End sanity lemma -----------------------------------------

/*
 * lemma to prove the protocol Authentication
 * 
 * 
 */

lemma Authentication_Phase_1_validation:
  "
  All UmD Sver authmessage #i. AuthenticA(UmD, Sver, authmessage) @i ==>
  (
    Ex #j. SendA(UmD, Sver, authmessage) @j & j < i
    )
  "
  
lemma Authentication_Phase_2_validation:
  "
  All Sver UmD authmessage #i. AuthenticB(Sver, UmD, authmessage) @i ==>
  (
    Ex #j. SendB(Sver, UmD, authmessage) @j & j < i
    )
  "

lemma Authentication_Phase_3_validation:
  "
  All UmD Sver authmessage #i. AuthenticC(UmD, Sver, authmessage) @i ==>
  (
    Ex #j. SendC(UmD, Sver, authmessage) @j & j < i
    )
  "

// ---------------------End authentication lemma -----------------------------------------

/*
 * 
 *  lemma to prove replay attack model
 *  Replay attack description: 
 * 
 *  All Send(U, S, message ) is accepted by Authentic(U, S, messsage)
 *  and there are not exist Authentic(U, S, messsage) after that
 * 
 */

lemma Replay_Attack_Authentication_Phase_1:    // In authentication 1

  "
  All UmD Sver authmessage #i. AuthenticA(UmD, Sver, authmessage) @i ==>
  (
    Ex #j. SendA(UmD, Sver, authmessage) @j 
    & j < i
    & not (
       Ex UmD2 Sver2 #i2. AuthenticA(UmD2, Sver2, authmessage) @i2 
       &
       (i < i2)
       )
  )
  "

lemma Replay_Attack_Authentication_Phase_2:    // In authentication 2

  "
  All UmD Sver authmessage #i. AuthenticB(UmD, Sver, authmessage) @i ==>
  (
    Ex #j. SendB(UmD, Sver, authmessage) @j 
    & j < i
    & not (
       Ex UmD2 Sver2 #i2. AuthenticB(UmD2, Sver2, authmessage) @i2 
       &
       (i < i2)
       )
  )
  "

lemma Replay_Attack_Authentication_Phase_3:    // In authentication 3

  "
  All UmD Sver authmessage #i. AuthenticC(UmD, Sver, authmessage) @i ==>
  (
    Ex #j. SendC(UmD, Sver, authmessage) @j 
    & j < i
    & not (
       Ex UmD2 Sver2 #i2. AuthenticC(UmD2, Sver2, authmessage) @i2 
       &
       (i < i2)
       )
  )
  "

// ---------------------End replay attack lemma -----------------------------------------

/*
 * 
 *  lemma to prove sinffing attack model
 * 
 */

lemma Sniffing_Attack_Authentication_Phase_1:      // In authentication 1
  "
  All cr r hl #i.(
      SecretA(cr, r, hl) @i ==>
        not (Ex #j. K(r) @j
        & K(cr) @j
        & K(hl) @j
        )
    )
  "
  
lemma Sniffing_Attack_Authentication_Phase_2:      // In authentication 2
  "
  All key #i.(
      SecretB(key) @i ==>
        not (Ex #j. K(key) @j
        )
    )
  "
  
lemma Sniffing_Attack_Authentication_Phase_3:      // In authentication 3
  "
  All key #i.(
      SecretC(key) @i ==>
        not (Ex #j. K(key) @j
        )
    )
  "
  
// ---------------------End sniffing attack lemma -----------------------------------------

end

